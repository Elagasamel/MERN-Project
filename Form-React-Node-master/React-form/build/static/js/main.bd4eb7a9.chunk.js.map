{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","email","name","tel","msg","emailError","msgError","telError","nameError","sentMessage","handleChange","event","preventDefault","target","isNaN","value","_this","setState","Object","defineProperty","length","handleSubmit","sumbitRequest","_callee","response","regenerator_default","a","wrap","_context","prev","next","axios","post","sent","console","log","data","t0","stop","this","getRequest","_callee2","_context2","get","_this$state","react_default","createElement","className","class","for","type","onChange","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd4eb7a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\"\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    email: '',\n    name: '',\n    tel: '',\n    msg: '',\n    emailError: '',\n    msgError: '',\n    telError: '',\n    nameError: '',\n    sentMessage: ''\n  }\n\n  handleChange = (event) => {\n    event.preventDefault()\n    if(event.target.name === 'tel') {\n      if( !isNaN(event.target.value)) {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n      }\n      if (event.target.value.length === 0) \n        this.setState({telError : 'Field should not be empty', tel : event.target.value})\n    } else if(event.target.name === 'email') {\n      if (event.target.value.length === 0) \n        this.setState({emailError : 'Field should not be empty', email : event.target.value})\n      else if (event.target.value.length < 10) \n        this.setState({emailError : 'Email length more than 10 chars', email : event.target.value })\n      else \n        this.setState({email : event.target.value, emailError: ''}) \n    } else if (event.target.name === 'name') {\n      if (event.target.value.length === 0) \n        this.setState({nameError : 'Field should not be empty', name : event.target.value})\n      else {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n      }\n    } else {\n      if (event.target.value.length === 0) \n        this.setState({msgError : 'Field should not be empty', msg : event.target.value})\n      else {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n      }\n    }\n    \n  }\n\n  handleSubmit = () => {\n    if(this.state.emailError === '' && this.state.telError === '' & this.state.nameError === '' && this.state.msgError === '') {\n      this.sumbitRequest()\n      \n    }\n  }\n\n  sumbitRequest = async () => {\n    try {\n      const response = await axios.post('https://node-react-medgo.herokuapp.com/api/request',{\n        email: this.state.email,\n        name: this.state.name,\n        tel: this.state.tel,\n        msg: this.state.msg\n      })\n        this.state.sentMessage = \"You're request has been sent!\";\n        console.log(response.data);\n    } catch (error) {\n      console.log('error : ',error)\n    } \n  }\n\n  getRequest = async () => {\n    try {\n      const response = await axios.get('https://node-react-medgo.herokuapp.com/api/request')\n      console.log(response.data)\n    } catch (error) {\n      console.log('error : ',error)\n    } \n  }\n\n  render() {\n\n    const {email, name, tel, msg, emailError, msgError, telError, nameError, sentMessage} = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-25\">\n                <label for=\"lname\">Name</label>\n              </div>\n              <div class=\"col-75\">\n                <input type=\"text\" onChange={this.handleChange} value={name} name=\"name\" placeholder=\"Name\" />\n                {nameError && <p className='errorMessage' >{nameError}</p> }\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-25\">\n                <label for=\"lname\">E-Mail</label>\n              </div>\n              <div class=\"col-75\">\n                <input type=\"text\" className={emailError ? 'inputError' : ''} onChange={this.handleChange} value={email} name=\"email\" placeholder=\"E-Mail\" />\n                {emailError && <p className='errorMessage' >{emailError}</p> }\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-25\">\n                <label for=\"lname\">Telephone</label>\n              </div>\n              <div class=\"col-75\">\n                <input type=\"text\" onChange={this.handleChange} value={tel} name=\"tel\" placeholder=\"Telephone\" />\n                {telError && <p className='errorMessage' >{telError}</p> }\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-25\">\n                <label for=\"subject\">Subject</label>\n              </div>\n              <div class=\"col-75\">\n                <textarea onChange={this.handleChange} value={msg} name=\"msg\" placeholder=\"Your request here...\"></textarea>\n                {msgError && <p className='errorMessage' >{msgError}</p> }\n              </div>\n            </div>\n            <div class=\"row\">\n              <button type=\"submit\" onClick={this.handleSubmit} >Submit form</button>\n              <p>{sentMessage}</p>\n            </div>\n          </div>\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}